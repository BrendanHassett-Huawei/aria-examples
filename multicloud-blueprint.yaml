tosca_definitions_version: cloudify_dsl_1_2

imports:  
  - http://www.getcloudify.org/spec/cloudify/3.3/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.3/plugin.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.3/plugin.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.3/plugin.yaml
  - types/application/openstack.yaml
  - types/multicloud/openstack.yaml
  # - types/application/aws.yaml
  # - types/multicloud/aws.yaml

inputs:

  # Openstack Inputs
  keystone_username:
    type: string

  keystone_password:
    type: string

  region:
    type: string

  keystone_tenant_name:
    type: string

  keystone_url:
    type: string

  region:
    type: string

  nova_url:
    type: string

  neutron_url:
    type: string

  openstack_image_id:
    type: string

  openstack_flavor_id:
    type: string

  network_name:
    type: string

  subnet_name:
    type: string

  application_port_name:
    type: string

  database_port_name:
    type: string

  router_name:
    type: string

  external_network_name:
    type: string

  # AWS EC2 Inputs

  aws_access_key_id:
    type: string

  aws_secret_access_key:
    type: string

  ec2_region_name:
    type: string

  aws_image_id:
    type: string

  aws_instance_type:
    type: string

  # General Inputs

  agent_user:
    type: string

  keypair_name:
    type: string

  local_path:
    type: string

node_templates:

  application:
    type: application.nodes.ApplicationModule
    relationships:
      - type: app_connected_to_mongo
        target: mongod
      - type: app_contained_in_nodejs
        target: nodejs

  nodejs:
    type: application.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  mongod:
    type: application.nodes.MongoDatabase
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs_host:
    type: aria.multicloud.Compute
    properties:
      resource_id: nodejs_host
      install_agent: false
      cloudify_agent:
        user: { get_input: agent_user }
        key: { get_property: [ keypair, private_key_path ] }
      openstack_properties:
        openstack_config: { get_property: [ provider_configuration, openstack_config] }
        server:
          image: { get_input: openstack_image_id }
          flavor: { get_input: openstack_flavor_id }
        management_network_name: { get_property: [application_network, resource_id] }
      aws_properties:
        aws_config: { get_property: [ provider_configuration, aws_config ] }
        image_id: { get_input: aws_image_id }
        instance_type: { get_input: aws_instance_type }
    relationships:
      - type: aria.relationships.instance_connected_to_keypair
        target: keypair
      - type: aria.relationships.instance_connected_to_floating_ip
        target: application_ip
      - type: aria.relationships.instance_connected_to_port
        target: application_port
      - type: aria.relationships.instance_connected_to_security_group
        target: nodejs_security_group

  mongod_host:
    type: aria.multicloud.Compute
    properties:
      resource_id: mongod_host
      install_agent: false
      cloudify_agent:
        user: { get_input: agent_user }
        key: { get_property: [ keypair, private_key_path ] }
      openstack_properties:
        openstack_config: { get_property: [ provider_configuration, openstack_config] }
        server:
          image: { get_input: openstack_image_id }
          flavor: { get_input: openstack_flavor_id }
        management_network_name: { get_property: [application_network, resource_id] }
      aws_properties:
        aws_config: { get_property: [ provider_configuration, aws_config ] }
        image_id: { get_input: aws_image_id }
        instance_type: { get_input: aws_instance_type }
    relationships:
      - type: aria.relationships.instance_connected_to_keypair
        target: keypair
      - type: aria.relationships.instance_connected_to_floating_ip
        target: database_ip
      - type: aria.relationships.instance_connected_to_port
        target: database_port
      - type: aria.relationships.instance_connected_to_security_group
        target: mongod_security_group

  application_port:
    type: aria.multicloud.port
    properties:
      resource_id: { get_input: application_port_name }
      openstack_properties:
        openstack_config: { get_property: [ provider_configuration, openstack_config] }
      aws_properties:
        aws_config: { get_property: [ provider_configuration, aws_config ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: application_network
      - type: cloudify.relationships.depends_on
        target: application_subnet
      - type: aria.relationships.port_connected_to_security_group
        target: nodejs_security_group

  database_port:
    type: aria.multicloud.port
    properties:
      resource_id: { get_input: database_port_name }
      openstack_properties:
        openstack_config: { get_property: [ provider_configuration, openstack_config] }
      aws_properties:
        aws_config: { get_property: [ provider_configuration, aws_config ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: application_network
      - type: cloudify.relationships.depends_on
        target: application_subnet
      - type: aria.relationships.port_connected_to_security_group
        target: mongod_security_group

  application_subnet:
    type: aria.multicloud.subnet
    properties:
      resource_id: { get_input: subnet_name }
      openstack_properties:
        openstack_config: { get_property: [ provider_configuration, openstack_config] }
        subnet:
          ip_version: 4
          cidr: 10.67.79.0/24
          dns_nameservers: [8.8.4.4, 8.8.8.8]
      aws_properties:
        aws_config: { get_property: [ provider_configuration, aws_config ] }
    relationships:
      - target: application_network
        type: cloudify.relationships.contained_in
      - target: router
        type: aria.relationships.subnet_connected_to_router

  application_network:
    type: aria.multicloud.network
    properties:
      resource_id: { get_input: network_name }
      openstack_properties:
        openstack_config: { get_property: [ provider_configuration, openstack_config] }
      aws_properties:
        aws_config: { get_property: [ provider_configuration, aws_config ] }

  external_network:
    type: aria.multicloud.network
    properties:
      use_external_resource: true
      resource_id: { get_input: external_network_name }
      openstack_properties:
        openstack_config: { get_property: [ provider_configuration, openstack_config] }
      aws_properties:
        aws_config: { get_property: [ provider_configuration, aws_config ] }

  router:
    type: aria.multicloud.router
    properties:
      resource_id: { get_input: router_name }
      openstack_properties:
        openstack_config: { get_property: [ provider_configuration, openstack_config] }
      aws_properties:
        aws_config: { get_property: [ provider_configuration, aws_config ] }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  nodejs_security_group:
    type: aria.multicloud.security_group
    properties:
      openstack_properties:
        openstack_config: { get_property: [ provider_configuration, openstack_config] }
        security_group:
          description: Security group for NodeJS Host
        rules:
          - port: 22
            remote_ip_prefix: 0.0.0.0/0
          - port: 3000
            remote_ip_prefix: 0.0.0.0/0
      aws_properties:
        aws_config: { get_property: [ provider_configuration, aws_config ] }
        description: Security group for NodeJS Host
        rules:
          - ip_protocol: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - ip_protocol: tcp
            from_port: 3000
            to_port: 3000
            cidr_ip: 0.0.0.0/0

  mongod_security_group:
    type: aria.multicloud.security_group
    properties:
      openstack_properties:
        openstack_config: { get_property: [ provider_configuration, openstack_config] }
        security_group:
          description: Security group for Mongod Host
        rules:
          - port: 22
            remote_ip_prefix: 0.0.0.0/0
          - port: 27017
            remote_ip_prefix: 0.0.0.0/0
          - port: 28017
            remote_ip_prefix: 0.0.0.0/0
      aws_properties:
        aws_config: { get_property: [ provider_configuration, aws_config ] }
        description: Security group for Mongod Host
        rules:
          - ip_protocol: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - ip_protocol: tcp
            from_port: 27017
            to_port: 27017
            cidr_ip: 0.0.0.0/0
          - ip_protocol: tcp
            from_port: 28017
            to_port: 28017
            cidr_ip: 0.0.0.0/0

  keypair:
    type: aria.multicloud.keypair
    properties:
      resource_id: { get_input: keypair_name }
      private_key_path: { get_input: local_path }
      openstack_properties:
        openstack_config: { get_property: [ provider_configuration, openstack_config ] }
      aws_properties:
        aws_config: { get_property: [ provider_configuration, aws_config ] }

  application_ip:
    type: aria.multicloud.ip_address
    properties:
      openstack_properties:
        openstack_config: { get_property: [ provider_configuration, openstack_config] }
        floatingip:
          floating_network_name: { get_input: external_network_name }
      aws_properties:
        aws_config: { get_property: [ provider_configuration, aws_config ] }

  database_ip:
    type: aria.multicloud.ip_address
    properties:
      openstack_properties:
        openstack_config: { get_property: [ provider_configuration, openstack_config] }
        floatingip:
          floating_network_name: { get_input: external_network_name }
      aws_properties:
        aws_config: { get_property: [ provider_configuration, aws_config ] }

  provider_configuration:
    type: provider_configuration
    properties:
      openstack_config:
        username: { get_input: keystone_username }
        password: { get_input: keystone_password }
        tenant_name: { get_input: keystone_tenant_name }
        auth_url: { get_input: keystone_url }
        region: { get_input: region }
        nova_url: { get_input: nova_url }
        neutron_url: { get_input: neutron_url }
      aws_config:
        aws_access_key_id: { get_input: aws_access_key_id }
        aws_secret_access_key: { get_input: aws_secret_access_key }
        ec2_region_name: { get_input: ec2_region_name }

outputs:
  endpoint:
    description: Web application endpoint
    value:
      openstack_ip_address: { get_attribute: [ application_ip, floating_ip_address ] }
      aws_ip_address: { get_attribute: [ nodejs_host, public_ip_address ] }
      port: 3000
